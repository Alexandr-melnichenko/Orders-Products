import pool from "../config/db.js";
import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const runMigrations = async () => {
  const conn = await pool.getConnection();
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü—ã
    const [tables] = await conn.query("SHOW TABLES LIKE 'orders'");
    if (tables.length > 0) {
      console.log("‚ÑπÔ∏è Tables already exist ‚Äî skipping migrations");
      return;
    }

    console.log("üîÑ No existing tables found ‚Äî running migrations...");

    // 2. –ß–∏—Ç–∞–µ–º SQL-—Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, "../db/database_schema.sql");

    try {
      await fs.access(sqlPath); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
    } catch {
      throw new Error(`Migration file not found: ${sqlPath}`);
    }

    const sql = await fs.readFile(sqlPath, "utf-8");

    console.log(`[MIGRATION DEBUG] Raw SQL length: ${sql.length}`);

    console.log(`Executing full schema SQL...`);
    const [results] = await conn.query(sql); // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–ï–°–¨ SQL-–§–ê–ô–õ –ö–ê–ö –û–î–ò–ù –ó–ê–ü–†–û–°
    console.log(`Full schema execution result:`, results);

    console.log("‚úÖ Database initialized");
  } catch (err) {
    console.error("‚ùå Migration failed:", err.message);
    throw err; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
  } finally {
    conn.release();
  }
};

export default runMigrations;
