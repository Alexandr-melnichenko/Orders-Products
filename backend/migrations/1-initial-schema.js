import pool from "../config/db.js";
import fs from "fs/promises";
import path from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–∞
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const runMigrations = async () => {
  const conn = await pool.getConnection();
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–±–ª–∏—Ü—ã
    const [tables] = await conn.query("SHOW TABLES LIKE 'orders'");
    if (tables.length > 0) {
      console.log("‚ÑπÔ∏è Tables already exist ‚Äî skipping migrations");
      return;
    }

    console.log("üîÑ No existing tables found ‚Äî running migrations...");

    // 2. –ß–∏—Ç–∞–µ–º SQL-—Ñ–∞–π–ª
    const sqlPath = path.join(__dirname, "../db/database_schema.sql");

    try {
      await fs.access(sqlPath); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É
    } catch {
      throw new Error(`Migration file not found: ${sqlPath}`);
      return;
    }

    const sql = await fs.readFile(sqlPath, "utf-8");

    // 3. –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—É–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
    const queries = sql
      .split(";")
      .map((q) => q.trim())
      .filter((q) => q.length > 0 && !q.startsWith("--"));

    // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    await conn.query("USE test_task_db");

    for (const query of queries) {
      try {
        await conn.query(query);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–∏–ø–∞ "—Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        if (!error.message.includes("already exists")) {
          console.error(`Migration error in query: ${query}`);
          throw error;
        }
      }
    }

    console.log("‚úÖ Database initialized");
  } catch (err) {
    console.error("‚ùå Migration failed:", error.message);
    throw err; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
  } finally {
    conn.release();
  }
};

export default runMigrations;
